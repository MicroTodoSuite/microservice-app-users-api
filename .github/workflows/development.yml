# ========================================================================
# PIPELINE DE DESARROLLO AUTOMATIZADO PARA MICROSERVICIOS
# ========================================================================

# Este pipeline se ejecuta autom√°ticamente al:
# 1. Hacer push a la rama main
# 2. Cuando el "Infrastructure Pipeline" finaliza exitosamente
name: Development Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_run:
    workflows: ["Release"]
    types:
      - completed
  repository_dispatch:
    types: [infra-completed]

# Variables reutilizables a lo largo del workflow
env:
  ACR_NAME: ${{ secrets.ACR_NAME }} # Nombre completo del Azure Container Registry (ACR)
  RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP_NAME }} # Grupo de recursos de Azure donde est√°n desplegadas las Container Apps
  AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS_COLONIA }} # Credenciales de Azure configuradas en GitHub Secrets
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID_COLONIA }} # ID de la suscripci√≥n de Azure configuradas en GitHub Secrets
  GITHUB_REPOSITORY: 'MicroTodoSuite/microservice-app-users-api' # Repositorio de users-api
  GH_TOKEN: ${{ secrets.GH_TOKEN }} # Github token con los permisos necesarios
  SERVICE_NAME: "users-api" # Nombre del microservicio

jobs:
  # ==============================================
  # ETAPA PRINCIPAL: CONSTRUCCI√ìN Y DESPLIEGUE
  # ==============================================
  build_and_deploy:
    name: Build y Deploy
    runs-on: ubuntu-latest # Ejecutor base

    steps:
      # Paso 1: Checkout del repositorio
      - name: Checkout repository
        uses: actions/checkout@v4

      # Paso 2: Autenticaci√≥n con Azure
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ env.AZURE_CREDENTIALS }}

      # Paso 3: Verificar que el grupo de recursos existe antes de continuar
      - name: Verificar si el grupo de recursos existe
        run: |
          echo "Verificando existencia del grupo de recursos..."
          if ! az group exists --name ${{ env.RESOURCE_GROUP }} --subscription ${{ env.AZURE_SUBSCRIPTION_ID }} | grep true; then
            echo "‚ùå El grupo de recursos no existe. Abortando ejecuci√≥n del pipeline."
            exit 1
          fi
          echo "‚úÖ El grupo de recursos existe."

      # Paso 4: Login al Azure Container Registry
      - name: Login al Azure Container Registry (ACR)
        run: |
          az acr login --name ${ACR_NAME%%.*}

      # Paso 5: Obtener versi√≥n del √∫ltimo release o usar timestamp
      - name: Obtener versi√≥n de la imagen
        id: get-version
        run: |
          # Usa GitHub CLI para obtener el tag de la √∫ltima release
          VERSION=$(gh release list --repo $GITHUB_REPOSITORY --limit 1 --json tagName --jq '.[0].tagName')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      # Paso 6: Construir y subir imagen con doble tag
      - name: Construir y subir imagen
        run: |
          docker build -t $ACR_NAME/${{ env.SERVICE_NAME }}:${{ steps.get-version.outputs.version }} -t $ACR_NAME/${{ env.SERVICE_NAME }}:latest .
          docker push $ACR_NAME/${{ env.SERVICE_NAME }}:${{ steps.get-version.outputs.version }}
          docker push $ACR_NAME/${{ env.SERVICE_NAME }}:latest

      # Paso 7: Desplegar la imagen modificada en sus Container App
      - name: Despliegue en Azure Container App
        if: ${{ github.event_name != 'repository_dispatch' }}
        run: |
          # Actualizar la Container App con la imagen correcta
          echo "üöÄ Actualizando ${{ env.SERVICE_NAME }}..."
          az containerapp update \
            --name ${{ env.SERVICE_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --image $ACR_NAME/${{ env.SERVICE_NAME }}:latest \
            --subscription ${{ env.AZURE_SUBSCRIPTION_ID }}

          # Reiniciar la revisi√≥n
          echo "üîÑ Reiniciando container de $app..."
          revision=$(az containerapp show \
            --name ${{ env.SERVICE_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --subscription ${{ env.AZURE_SUBSCRIPTION_ID }} \
            --query "properties.latestReadyRevisionName" \
            --output tsv)

          if [[ -n "$revision" ]]; then
            az containerapp revision restart \
              --name ${{ env.SERVICE_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --revision $revision \
              --subscription ${{ env.AZURE_SUBSCRIPTION_ID }}
          else
            echo "‚ö†Ô∏è No se encontr√≥ revisi√≥n lista para ${{ env.SERVICE_NAME }}, omitiendo reinicio"
          fi
          echo "‚úÖ ${{ env.SERVICE_NAME }} actualizado correctamente"
          echo "-------------------------------------------"
